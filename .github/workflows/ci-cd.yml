name: Frontend Deployment
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  IMAGE_PREFIX: ${{ github.repository }}
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Docker setup
        uses: docker/setup-buildx-action@v3
      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,format=short
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=front
          cache-to: type=gha,mode=max,scope=front
          build-args: |
            NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_API_URL_2=${{ vars.NEXT_PUBLIC_API_URL_2 }}
            NEXT_PUBLIC_API_URL_PRO=${{ vars.NEXT_PUBLIC_API_URL_PRO }}
      - name: Save Admin tag to file
        run: echo "${{ steps.meta.outputs.tags }}" > front_tag.txt
      - name: Upload tags as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-tags
          path: |
            front_tag.txt
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-tags
      - name: Extract sha tags and export as env vars
        run: |
          echo "example_FRONT_TAG=$(cat front_tag.txt | grep 'sha-')" >> $GITHUB_ENV
      - name: Configure Kubeconfig
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Update deployment with environment variables
        run: |
          # First update the image
          kubectl -n example-stage set image deployment/example-front example-front=$example_FRONT_TAG

      - name: Send Slack Notification
        uses: act10ns/slack@v2.0.0
        with:
          status: ${{ job.status }}
          config: .github/slack.yml
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          WORKFLOW_TYPE: ADMIN
        if: failure()
